"""add user and role table

Revision ID: 4a002517f2a9
Revises:
Create Date: 2023-03-06 16:53:22.469390

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "4a002517f2a9"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    role_table = op.create_table(
        "api_role",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.Column("description", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("api_role", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_role_id"), ["id"], unique=False)
        batch_op.create_index(batch_op.f("ix_role_name"), ["name"], unique=False)

    user_table = op.create_table(
        "api_user",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("email", sa.String(length=100), nullable=False),
        sa.Column("username", sa.String(length=100), nullable=True),
        sa.Column("phone", sa.String(length=20), nullable=True),
        sa.Column("avatar", sa.String(length=100), nullable=True),
        sa.Column("hashed_password", sa.String(length=200), nullable=False),
        sa.Column("state", sa.Integer(), nullable=True),
        sa.Column("role", sa.Integer(), nullable=True),
        sa.Column("organization", sa.String(length=100), nullable=True),
        sa.Column("scene", sa.String(length=500), nullable=True),
        sa.Column("uuid", sa.String(length=36), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.Column("last_login_datetime", sa.DateTime(), nullable=True),
        sa.Column("create_datetime", sa.DateTime(), nullable=False),
        sa.Column("update_datetime", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("api_user", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_user_email"), ["email"], unique=True)
        batch_op.create_index(batch_op.f("ix_user_id"), ["id"], unique=False)
        batch_op.create_index(batch_op.f("ix_user_phone"), ["phone"], unique=True)
        batch_op.create_index(batch_op.f("ix_user_role"), ["role"], unique=False)
        batch_op.create_index(batch_op.f("ix_user_state"), ["state"], unique=False)
        batch_op.create_index(batch_op.f("ix_user_username"), ["username"], unique=False)

    conn = op.get_bind()
    try:
        roles = conn.execute("SELECT * FROM role").fetchall()
        roles = [dict(i) for i in roles]
        if roles:
            op.bulk_insert(role_table, roles)
        users = conn.execute("SELECT * FROM user").fetchall()
        users = [dict(i) for i in users]
        if users:
            op.bulk_insert(user_table, users)
    except Exception as e:
        print("Could not migrate app users and roles to api_users and api_roles: %s" % e)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("api_user", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_username"))
        batch_op.drop_index(batch_op.f("ix_user_state"))
        batch_op.drop_index(batch_op.f("ix_user_role"))
        batch_op.drop_index(batch_op.f("ix_user_phone"))
        batch_op.drop_index(batch_op.f("ix_user_id"))
        batch_op.drop_index(batch_op.f("ix_user_email"))
    op.drop_table("api_user")

    with op.batch_alter_table("api_role", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_role_name"))
        batch_op.drop_index(batch_op.f("ix_role_id"))

    op.drop_table("api_role")
    # ### end Alembic commands ###
